group "com.swisschain.exchange.me"
version "1.0"

buildscript {
    ext.spring_boot_version = "2.0.6.RELEASE"
    ext.kotlin_version =  "1.3.72"
    ext.protobuf_gradle_plugin = "0.8.12"

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.google.protobuf:protobuf-gradle-plugin:$protobuf_gradle_plugin"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
    }
}

apply plugin: "idea"
apply plugin: "kotlin"
apply plugin: "kotlin-spring"
apply plugin: "application"
apply plugin: "com.google.protobuf"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

ext {
    protobuf_version = "3.11.4"
    gson_version = "2.8.6"
    module_kotlin_jackson_version = "2.10.3"
    http_client_version = "4.5.11"
    fst_version = "2.57"
    jedis_version = "3.2.0"
    big_math_version = "2.3.0"
    lmax_disruptor_version = "3.4.2"
    springfox_swagger2 = "2.9.2"
    springfox_swagger_ui = "2.9.2"
    junit_version = "4.13"
    mockito_kotlin_version = "1.6.0"
    grpcVersion = "1.26.0"
}

dependencies {
    // external libs
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "com.google.protobuf:protobuf-java:$protobuf_version"
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$module_kotlin_jackson_version"
    implementation "org.apache.httpcomponents:httpclient:$http_client_version"
    implementation "de.ruedigermoeller:fst:$fst_version"
    implementation "redis.clients:jedis:$jedis_version"
    implementation "ch.obermuhlner:big-math:$big_math_version"
    implementation "com.lmax:disruptor:$lmax_disruptor_version"


    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-log4j2"

    implementation "io.springfox:springfox-swagger2:$springfox_swagger2"
    implementation "io.springfox:springfox-swagger-ui:$springfox_swagger_ui"

    implementation "io.grpc:grpc-netty-shaded:$grpcVersion"
    implementation "io.grpc:grpc-protobuf:$grpcVersion"
    implementation "io.grpc:grpc-stub:$grpcVersion"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

configurations {
    implementation.exclude module: "spring-boot-starter-logging"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/grpc', 'src/main/java', 'src/main/kotlin']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

compileKotlin {
    dependsOn ":generateProto"
    kotlinOptions {
        freeCompilerArgs = ["-Xno-param-assertions", "-Xno-call-assertions"]
        apiVersion = "1.3"
        jvmTarget = "1.8"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobuf_version"
    }

    generateProtoTasks.generatedFilesBaseDir = "src"

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

ext.revision = 'git rev-list --count HEAD'.execute().text.trim()
ext.hash = 'git rev-parse --short HEAD'.execute().text.trim()
ext.buildVersion = "${revision}.${hash}"

bootJar {
    manifest {
        attributes "Revision-number": revision, "BuildVersion": buildVersion, "Version": version
    }
}

task printProperties doLast {
    println "Revision-number": revision, "BuildVersion": buildVersion, "Version": version
}

bootDistZip {
    archiveFileName = "${project.name}-${project.version}.zip"
    into("${project.name}-${project.version}.zip") {
        from "${rootProject.projectDir}/src/dist"
    }
}

task versionTxt()  {
    doLast {
        new File("${projectDir}/docker", "version.txt").text = "$version.${readVersionCode()}"
    }
}

mainClassName = "com.swisschain.matching.engine.AppStarterKt"
applicationDefaultJvmArgs = ["-Xms512m", "-Xmx1g"]
distTar.enabled = false